{
  "replies": [
    {
      "content": "Since I created this website’s colophon (also known as meta page), I’ve wanted to also created a page that show cased how this website evolved over the years. I created this website when I was 14, in 2014. At first, it was just a bunch of HTML pages written by hand. Within the first year, the website moved from pure HTML to WordPress and then to Hugo.To make this post more bearable - there are a lot of versions! - I decided to split it into two: before IndieWeb and after IndieWeb. I started getting into the IndieWeb back in 2020 and I think it is a good breaking point. Besides, there would be way too many images to put into a single post.2014 Snapshot From Web ArchiveBack in 2014, I wasn’t using Git or any other version control systems. Also, while using WordPress, that would be infeasible and not make any sense. Thus, I don’t have backups from that time, except from the image above which I found on the Web Archive.2015In 2015, however, I ditched WordPress and replaced it by Hugo. Since I started using Hugo, I have also kept a repository in which I track all the changes of my website over the years. Therefore, this is the first year where I can actually show you how the website looked, at least in the beginning.At the time, I was very into the parallax effect. Unfortunately, you can’t see it on the images below. For the home page, the images would stay in the same position while scrolling. On the articles page, the image would scroll slowly than the article, giving a depth effect. This was the first version of the website. Months after, I made some drastic updates and decided to call it version 1.2. I really don’t know what I was doing by not calling this a major version. As you can see below, I changed the homepage dramatically to what looks like a bad photo collage. Each article and page would have its own accent color and I kept the parallax effect on the articles pages. 2016In 2016, I changed it enough to call it version 2. I went for a white-ish color scheme and kept the article lists as cards. I think this was something fairly common at the time and it’s still seen in many websites nowadays. In this year, I made way too many major versions. I am skipping version 3 because I could not find a commit where it looked decent. Fast forwarding to version 4, I added an interactive command-line-like thing in the homepage where you could run some commands that would redirect you to the appropriate page. It seems I was into monospaced fonts at the time. I made yet another revamp in 2016 - probably too much free time in my hands - where my homepage looked like a page out of those generic business card online website services, such as about.me. The styles of the remaining pages also changed, but not as dramatically as before. 2017In 2017, I managed to go through the whole year with the same design (magic!). This was version 7 of my website. By this time, I decided to go with a vertical menu on the left. The homepage would also showcase some photos I took that I was proud of. Some design decisions on this version remained until very recently, such as the projects page. 2018In 2018 I did another face wash to the website. The homepage had an effect where the sentence bellow my name would change every few seconds. The animation was as if it was being typed and untyped. Some months after I released version 9 where I went back to the 2018 design, but with some twists. It is very similar, but there’s a different color palette and effects. 20192019 is the last year of this post. In this year, version 10 was released. It was very simple. You can now see that my usage of emojis is growing - which remains until today. I hope you enjoyed this post. I wanted to document and have images of the previous versions of this website to be able to revisit them. Soon, I will release a new post showcasing all the remaining versions that I developed after getting into the IndieWeb community.",
      "author": "Henrique Dias",
      "authorUrl": "https://hacdias.com/",
      "date": "2022-03-25T11:37:59+01:00",
      "url": "https://hacdias.com/2022/03/25/my-website-before-indieweb/",
      "type": "mention"
    },
    {
      "content": "In 2015, I posted an article with a very similar name to this one. At the time, I was saying goodbye to WordPress and welcoming Hugo. As with everything in life, there are cycles and things change. It’s time to turn a new page on this website’s life cycle.Around a year ago, I explained why I was rebuilding my website’s CMS, Eagle. At the time, I decided against completely replacing Hugo, the static website generator I’ve been using for years, because it worked. However, a year has passed and I’ve thought many times about replacing Hugo and I finally did it.Since November 15th, I have been running the new version of Eagle. Hopefully, you didn’t notice as nothing broke for you. If it did, please let me know! In this new system, completely powered by Eagle, there’s no Hugo or static page building anymore.Building v2Building Eagle v2 was a mixed experience: it was both faster and more challenging than I thought. I’ve been relying on some features of Hugo, such as shortcodes, for years. These allow me to define custom “functions” for markdown. Fortunately, I managed to replace them either by just copy pasting their HTML code - if they were used 1 or 2 times - or add a custom node to Goldmark, the markdown parser library I use.With v2, I have feature parity with what I had with Hugo. I also added yearly, monthly and daily archives, as well as 410 Gone for deleted posts. There’s also XML feeds, besides the already existing JSON and ATOM feeds.More importantly, I brought back Micropub support, which I removed around a year ago for no reason. I also implemented IndieAuth and now I don’t need to use IndieAuth.com to login anymore.If you look at my more page, you’ll notice that there’s a lot of different content categories (or “sections”) now. I brought back the checkins and watches, which I had removed before because they were slowing down the Hugo build process.Everything is stored as markdown files. However, there’s a PostgreSQL instance running to index my posts and help me generate indexes and the nice summaries for some of the sections.And a lot more!What’s next?I am far from done! Since Monday until today, I have implemented a few other features that I wanted, but the list is always growing. I’m sure you’ll see a new post lurking here and there about a new feature coming out.",
      "author": "Henrique Dias",
      "authorUrl": "https://hacdias.com",
      "date": "2021-11-19T08:02:07+01:00",
      "url": "https://hacdias.com/2021/11/19/farewell-hugo-hello-eagle/",
      "type": "mention"
    },
    {
      "name": "Adding Support for Micropub Endpoint",
      "content": "Recently, I have talked about restructuring the URLs of my website and adding IndieAuth so I could use my domain as my main online identity to login into services. Along those lines, I came across Micropub. In their own words:The Micropub protocol is used to create, update and delete posts on one’s own domain using third-party clients.So it’s basically a simple common protocol that could let any website get updated using an arbitrary CMS (Content Management Software) or application that supports it. I really enjoyed the spec and there’s suggestions and issues being worked on.What I’ve been trying to do is to implement this on my own website. There aren’t many open source server implementations unfortunately. However, I understand the reason: most of them are highly specific for their author’s website and so is the one I’m building.I’ve been building it using express.js and I’ve already published two different nom modules:@hacdias/micropub-parser@hacdias/indieauth-middlewareApart from that, I’m mostly calling APIs directly: I’m relying a lot on some of @aaronpk’s modules, such as Compass and XRay . Those are, btw, awesome modules and you should try them out if you’re interested in this subject.The current status is that I pass almost all the tests provided by micropub.rocks even though I’m not satisfied with the solution I’ve come across. Why?First of all, if you’ve been following me for more time, you might’ve came across an old blog post talking about how I am using Hugo to generate my website. But that is not the only “problem” of this: I’m also using IPFS to store my website for the folks using it. So there’s quite a few constraints.ProblemsBuild Speed and ComplexityIt needs to build fast so every time I post something new, I don’t need to wait a few seconds. Hugo is known for being fast, but I’ve about ~950 posts on this website right now divided between replies, notes, likes and articles that I’ve imported.It takes ~1s to build on my machine and ~3s on my server which is definitely not ideal. I don’t know why this is taking so much time.In addition, the complexity of my themes is really big and that might be caused by the not-so-high flexibility of Hugo and Go templates. There are template languages that are more flexible and static website generators that allow plugins, such as Jekyll — not an option since I need speed — or 11ty.StaticAll links must be relative and the site must be 100% static. Any dynamic stuff must be done on the client-side so it plays well with IPFS and other distributed technologies that don’t support server-side rendering.Personally, I would love to have a better search engine working for myself, to find bookmarks, to find old replies. Tags are definitely not enough for this and search engines take quite a few time to get updated with all the new content. And… do I want all of the content on search engines anyways?Solutions and ThoughtsObviously I’ve been thinking a bit about this and some conclusions were drawn to my mind. So let me “dump” them here in a rational way.Build SpeedI thought about just moving out of a static website generator and have some more dynamic website. With that, I would be able to have more powerful queries and basically solve the problems from the “Static” point I mentioned above.Not to mention that if the pages were built on the fly with server-side generation, I would not require full builds every time. But… is it worth it? That way I couldn’t cache it on IPFS. What if I cached the website once per day and updated my static site on IPFS? These are just some questions I’m throwing here.Another interesting option here would be to continuously run hugo —watch. That way Hugo would be watching for updates and only the required pages would be rebuilt. Should I do that?StaticTwo solutions: one would be what I said on the previous point and just make the website server-side rendered. It would open an immense sea of opportunities and things I could do.Or, another interesting way of putting things, build JSON indexes that could be used by client-side server engines such as Lunr. However, as the website would become bigger and bigger, I am pretty sure the indexes would become bigger and bigger and the load times slower and slower.Well, these are just some problems I need to solve before continuing and I would personally love your take on them. What should I do in your opinion? Please lemme know!",
      "author": "Henrique Dias",
      "authorUrl": "https://hacdias.com/",
      "date": "2020-01-01T23:30:00Z",
      "url": "https://hacdias.com/2020/01/01/building-micropub/"
    }
  ],
  "interactions": [
    {
      "author": "Beko Pharm",
      "authorUrl": "https://beko.famkos.net/author/beko/",
      "date": "2020-03-23T14:20:00Z",
      "url": "https://beko.famkos.net/2020/03/23/75334/",
      "type": "like"
    }
  ]
}